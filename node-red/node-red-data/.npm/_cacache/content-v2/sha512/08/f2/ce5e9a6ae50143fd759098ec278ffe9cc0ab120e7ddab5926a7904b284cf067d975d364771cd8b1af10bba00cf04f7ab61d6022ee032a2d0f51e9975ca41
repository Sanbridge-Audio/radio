{"_id":"squeezenode-auth","_rev":"1-d21c4cc79b5ffc0881bb5f0c1a40d9b9","name":"squeezenode-auth","dist-tags":{"latest":"1.0.0"},"versions":{"1.0.0":{"name":"squeezenode-auth","author":{"name":"Andrey Okonetchnikov","email":"andrey@okonet.ru"},"version":"1.0.0","description":"Node.js wrapper library for squeezebox CLI/json interface with Spotify/SoundCloud support","main":"server.js","keywords":["squeezebox","logitechmediaserver","spotify","soundcloud","jsonrpc","remote","smarthome","home automation","queezy"],"devDependencies":{"celeri":"git+https://github.com/crcn-archive/celeri.git","nomnom":"^1.8.1"},"dependencies":{"jayson":"^1.1.3","lodash":"^4.17.4","request":"2.51.0","super":"^0.2.3"},"repository":{"type":"git","url":"git+https://github.com/okonet/squeezenode.git"},"scripts":{"start":"node server.js"},"gitHead":"dacc6fc942d252da187457464a9a186b6431312d","bugs":{"url":"https://github.com/okonet/squeezenode/issues"},"homepage":"https://github.com/okonet/squeezenode#readme","_id":"squeezenode-auth@1.0.0","_nodeVersion":"10.15.3","_npmVersion":"6.13.4","_npmUser":{"name":"okonet","email":"andrey@okonet.ru"},"dist":{"integrity":"sha512-51K8qMLnlmpp3nZlfHqRTbcKqBZ5gONURBVi9gPRvhu8NHU8TDtkW0QqmNXC+1QSGMNl2kau+tVHl8vTKu5rww==","shasum":"52ab883e66abfea371cd8e535afedc8585149cc5","tarball":"https://registry.npmjs.org/squeezenode-auth/-/squeezenode-auth-1.0.0.tgz","fileCount":16,"unpackedSize":56251,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeDfI8CRA9TVsSAnZWagAANigP+wSQyKyGg7WJkeB1HZ/u\nJK2ZeLtpKRaE//uQf0Cc1hXgQS5Z9qIAdK2H3+npv/9tPytWd3cLJHTjV0qF\nzJzPoS54ywJoDRKPhIx51aZUCitGSH7iWC+jlEns4Hf2rWnk4q6BAGE8Zf1a\nGNjVLq7qtjl2Nj1iIu3K6qsdUMTgtgsz1YJEdERk3M42zEOzYOmHdQEleHNI\n+lvA4vMONnOMSewNVWo6y0AYXo/F15rDS4V5Pq7Bwe2Rw7ibxDS/rosHcvxs\nZAQ8V2sqSKRYnhvEZ6gdaDIK8LxILOLdtvH3IqxXlUEatKDSR5hyAFyfQMjj\n54GbtDHsb5rS3a6zfvzsFUrHizX9E6TKNg92OwrovFT0QkwWk3Ge/HJIMB24\nQtoeJNzwF3mrrB1yQIxsCMEI2Pzo6oWn9i7Rk8Q84kLZ6EJVOFnclD5bST1e\nnTJruVrwYiR5wS19/khRbC5DltU5xomWIonHmMuCft2ftH3ZESuZT2ibdGRr\nkKkaooSyLx8L+JwjE5JmtBuIotnPaw3gtbNWm/adVdrqp0pXmOzZ/OzMRpTx\nB2KeKDgUCbuNkD2rvBvzbKyL8FVLAIruj+UZf1dKvwvaUfLSEu9ZlgaAGRj4\nG/8c/jAHQjMkxX35ItEAP15QfyRGcy8Ht1SAiLrR1rjAql8kHJPj3EmKmNsl\n5tEd\r\n=Opsq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDazTfdSxI+d++pRWZhy22NFqeZOvUIl/AT3iVKfHzRXgIgNZOqYhDbftXm127izB9lQKDH4UnK6y3/erGYKWoQO14="}]},"maintainers":[{"name":"okonet","email":"andrey@okonet.ru"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/squeezenode-auth_1.0.0_1577972283878_0.9695435204626208"},"_hasShrinkwrap":false}},"time":{"created":"2020-01-02T13:38:03.877Z","1.0.0":"2020-01-02T13:38:03.986Z","modified":"2022-05-18T13:00:09.723Z"},"maintainers":[{"name":"okonet","email":"andrey@okonet.ru"}],"description":"Node.js wrapper library for squeezebox CLI/json interface with Spotify/SoundCloud support","homepage":"https://github.com/okonet/squeezenode#readme","keywords":["squeezebox","logitechmediaserver","spotify","soundcloud","jsonrpc","remote","smarthome","home automation","queezy"],"repository":{"type":"git","url":"git+https://github.com/okonet/squeezenode.git"},"author":{"name":"Andrey Okonetchnikov","email":"andrey@okonet.ru"},"bugs":{"url":"https://github.com/okonet/squeezenode/issues"},"readme":"squeezenode\n===========\n\nSqueezenode is a Node.js wrapper library for Logitech Media Server (Squeezebox) CLI/json interface with Spotify/SoundCloud support\n\nHow To Use\n----------\n\nTo use this library, make sure Squeezebox (Logitech Media Server) server is up and running.\n\nNote that default port for LMS server is port 9000 (you can change it under settings.\nTo start using te library instantiate the SqueezeServer class, eg.\n\n    var SqueezeServer = require('squeezenode');\n    var squeeze = new SqueezeServer('http://localhost', 9000);\n    //subscribe for the 'register' event to ensure player registration is complete\n\n    squeeze.on('register', function(){\n        //you're ready to use the api, eg.\n        squeeze.getPlayers( function(reply) {\n                console.dir(reply);\n        });\n    });\n\nAll API requests returns reply in a callback. Each reply contains 'ok' bool variable which is true if request\nhas been processed properly, false otherwise and 'result' property with the request result.\n\nDemo App\n--------\n\nInside Demo folder there is a simple demo application with interactive shell that shows squeezenode\nfunctionality (at least some portion of it especially Spotify API), refer to demo's README for more details/\n\nSpotify Examples\n----------------\n\nSqueezenode supports Triode's Spotify (premium users only) plugin, therefore allows to play spotify based playlists and songs. Below are a few examples of using Squeezenode with Spotify.\nIn order to use squeezenode and Spotify you need to have Triode's Spotify plugin enabled in Logitech Media Server settings and configured.\n\nFirst verify that you can play Spotify music using standard web GUI, if it's working, you're ready to go.\n\nLet's assume you'd like to play 'The Fixer' performed by Pearl Jam with player 'testPlayer'.\n\n    var SqueezeServer = require('squeezenode');\n    var squeeze = new SqueezeServer('http://192.168.0.10', 9000);\n\n    /*\n    *\n    * This example shows how to play specific song (in this case The Fixer by Pearl Jam\n    * with player testPlayer\n    *\n    */\n\n    /* helper function*/\n    function playerIdByName(name, callback) {\n        var found = false;\n        squeeze.getPlayers( function(reply) {\n            for (var id in reply.result) {\n                if(reply.result[id].name === name) {\n                    found = true;\n                    callback ({ok: true, playerId: reply.result[id].playerid});\n                }\n            }\n            if (!found)\n                callback ({ok: false});\n        });\n    }\n\n    squeeze.on('register', function(){\n        //we only need a couple (5) of search results\n        squeeze.apps.spotify.searchTracks('The fixer', 0, 5, function (reply) {\n            if (reply.ok) {\n            console.log ('we found song named: %s written by %s, with spotifyUri: %s',\n                reply.result.tracks[0].name,\n                reply.result.tracks[0].artists[0].name,\n                reply.result.tracks[0].uri);\n                //Now let's play the song with our player\n                playerIdByName('testPlayer', function (pl) {\n                    if (reply.ok) {\n                        squeeze.apps.spotify.loadToPlaylist(reply.result.tracks[0].uri, pl.playerId, function (reply) {\n                            if (!reply.ok) {\n                                console.dir (reply);\n                            }\n                            //if needed, let's adjust the volume\n                            squeeze.players[pl.playerId].setVolume(40);\n                            //Enjoy listening\n                        });\n                    }\n                });\n            }\n        });\n    });\n\nTODO\n----\n\n* Better documentation\n* Add full API description\n* Add wiki\n\nsqueezenode-lordpengwin\n-----------------------\n* Added suppport for HTTP basic auth\n* Added support for additional commands\n* Merged changes from pssc fork\n","readmeFilename":"README.md"}