[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "238164dacc2f3e2c",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "de6f18bf45cc2384",
        "type": "tab",
        "label": "Volume",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2bddea5507d7d95a",
        "type": "esphome-device",
        "name": "Controls Radio",
        "host": "192.168.1.155",
        "port": 6053,
        "reconnect": 15,
        "loglevel": "0",
        "logdump": false,
        "ble": false
    },
    {
        "id": "e2244eb88135572b",
        "type": "esphome-device",
        "name": "",
        "host": "192.168.1.155",
        "port": 6053,
        "reconnect": 15,
        "loglevel": "0",
        "logdump": false,
        "ble": false
    },
    {
        "id": "28ac4b4cefc21e9b",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": 30,
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": ": ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "default",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": false
    },
    {
        "id": "e1d4e5f5.0d6d58",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "LMS JSON-RPC",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.183:9008/jsonrpc.js",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 360,
        "wires": [
            [
                "d5a7c5e3.8e8b6",
                "e3d8e1c0.0a5c4"
            ]
        ]
    },
    {
        "id": "d5a7c5e3.8e8b6",
        "type": "json",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 710,
        "y": 360,
        "wires": [
            [
                "e3d8e1c0.0a5c4",
                "b9c0b6d0.6a6a5"
            ]
        ]
    },
    {
        "id": "e3d8e1c0.0a5c4",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Debug Response",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 930,
        "y": 320,
        "wires": []
    },
    {
        "id": "b9c0b6d0.6a6a5",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Parse Status",
        "func": "const status = msg.payload.result;\nmsg.payload = {\n    \"artist\": status.artist,\n    \"title\": status.title,\n    \"album\": status.album,\n    \"volume\": status[\"mixer volume\"],\n    \"muted\": status[\"mixer muting\"],\n    \"duration\": status.duration,\n    \"time\": status.time,\n    \"state\": status.mode\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 930,
        "y": 460,
        "wires": [
            [
                "e3d8e1c0.0a5c4"
            ]
        ]
    },
    {
        "id": "fdfb0a8a.0c1d3",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Mute Toggle",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{\"action\":\"mute\"}",
        "payloadType": "json",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "a1e9a0c0.3a0d"
            ]
        ]
    },
    {
        "id": "9c4a0d5a.7e8c1",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Volume 25%",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "{\"action\":\"volume\",\"value\":25}",
        "payloadType": "json",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "a1e9a0c0.3a0d"
            ]
        ]
    },
    {
        "id": "7f6a1a2c.1a5c3c",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Play/Pause",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{\"action\":\"play\"}",
        "payloadType": "json",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "a1e9a0c0.3a0d"
            ]
        ]
    },
    {
        "id": "dcc0a8c6.4c8e48",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Next Track",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{\"action\":\"next\"}",
        "payloadType": "json",
        "x": 120,
        "y": 360,
        "wires": [
            [
                "a1e9a0c0.3a0d"
            ]
        ]
    },
    {
        "id": "a3f2a0d9.7a4a58",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Get Status",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{\"action\":\"status\"}",
        "payloadType": "json",
        "x": 120,
        "y": 520,
        "wires": [
            [
                "a1e9a0c0.3a0d"
            ]
        ]
    },
    {
        "id": "a1e9a0c0.3a0d",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Build Command",
        "func": "const playerId = \"b8:27:eb:1c:39:1d\"; // REPLACE WITH YOUR PLAYER ID\nconst action = msg.payload.action;\nconst value = msg.payload.value;\n\nlet command;\nswitch(action) {\n    case 'mute':\n        command = [\"mixer\", \"muting\", value || \"toggle\"];\n        break;\n    case 'volume':\n        command = [\"mixer\", \"volume\", value];\n        break;\n    case 'play':\n        command = [\"play\"];\n        break;\n    case 'pause':\n        command = [\"pause\"];\n        break;\n    case 'next':\n        command = [\"playlist\", \"index\", \"+1\"];\n        break;\n    case 'previous':\n        command = [\"playlist\", \"index\", \"-1\"];\n        break;\n    case 'status':\n        command = [\"status\", \"-\", 1, \"tags:cgABbehldiqtyrSuoKLN\"];\n        break;\n}\n\nmsg.payload = {\n    \"id\": 1,\n    \"method\": \"slim.request\",\n    \"params\": [playerId, command]\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            [
                "e1d4e5f5.0d6d58"
            ]
        ]
    },
    {
        "id": "57fd36b9a5824e2f",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Previous Track",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "{\"action\":\"previous\"}",
        "payloadType": "json",
        "x": 140,
        "y": 400,
        "wires": [
            [
                "a1e9a0c0.3a0d"
            ]
        ]
    },
    {
        "id": "4f7699b6b59a2579",
        "type": "debug",
        "z": "238164dacc2f3e2c",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 340,
        "wires": []
    },
    {
        "id": "e32ecb971068944f",
        "type": "debug",
        "z": "238164dacc2f3e2c",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 404,
        "y": 408,
        "wires": []
    },
    {
        "id": "ed23088fbf647cab",
        "type": "esphome-in",
        "z": "238164dacc2f3e2c",
        "name": "Volume Knob",
        "device": "e2244eb88135572b",
        "entity": "3355093594",
        "topic": "",
        "bleaddress": "",
        "x": 150,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4ff7bb286816998b",
        "type": "api-call-service",
        "z": "238164dacc2f3e2c",
        "name": "",
        "server": "28ac4b4cefc21e9b",
        "version": 7,
        "debugenabled": false,
        "action": "media_player.volume_set",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "media_player.desk"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "media_player",
        "service": "volume_set",
        "x": 410,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ae5ac8079bc238ff",
        "type": "debug",
        "z": "de6f18bf45cc2384",
        "name": "Raw Encoder Value",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 160,
        "wires": []
    },
    {
        "id": "624a8c6e5c1ff826",
        "type": "debug",
        "z": "de6f18bf45cc2384",
        "name": "Volume Set Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "e0b45d5b9fdc4493",
        "type": "esphome-in",
        "z": "de6f18bf45cc2384",
        "name": "Volume Knob",
        "device": "e2244eb88135572b",
        "entity": "3355093594",
        "topic": "",
        "bleaddress": "",
        "x": 90,
        "y": 220,
        "wires": [
            [
                "ae5ac8079bc238ff",
                "cc9b66fa2cee6869"
            ]
        ]
    },
    {
        "id": "cf69238bf8354f69",
        "type": "api-call-service",
        "z": "de6f18bf45cc2384",
        "name": "Set Media Player Volume",
        "server": "28ac4b4cefc21e9b",
        "version": 7,
        "debugenabled": false,
        "action": "media_player.volume_set",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "media_player.desk"
        ],
        "labelId": [],
        "data": "{\"volume_level\":{{payload.volume_level}}}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "media_player",
        "service": "volume_set",
        "x": 530,
        "y": 220,
        "wires": [
            [
                "624a8c6e5c1ff826"
            ]
        ]
    },
    {
        "id": "cc9b66fa2cee6869",
        "type": "function",
        "z": "de6f18bf45cc2384",
        "name": "Convert to volume level",
        "func": "// Print the raw payload to debug\nnode.warn(\"Raw payload: \" + JSON.stringify(msg.payload));\n\n// Get the state value from the ESPHome object\nlet encoderValue = 0;\n\n// Check if payload has a state property (from ESPHome)\nif (msg.payload && typeof msg.payload === 'object' && 'state' in msg.payload) {\n    encoderValue = Number(msg.payload.state);\n    node.warn(\"Found state property: \" + encoderValue);\n} else if (!isNaN(Number(msg.payload))) {\n    // If it's just a simple number\n    encoderValue = Number(msg.payload);\n} else {\n    node.warn(\"Invalid encoder format, using 0\");\n}\n\n// Make sure it's a valid number\nif (isNaN(encoderValue)) {\n    node.warn(\"Invalid encoder value, using 0\");\n    encoderValue = 0;\n}\n\n// Scale the incoming value to 0-1 range\n// Adjust the divisor (100) based on your encoder's range\nlet volume = encoderValue / 100;\n\n// Ensure volume is between 0 and 1\nvolume = Math.min(Math.max(volume, 0), 1);\n\n// Round to 2 decimal places to avoid floating point issues\nvolume = Math.round(volume * 100) / 100;\n\n// Format for direct use in Home Assistant\nmsg.payload = {\n    volume_level: volume\n};\n\n// Log the output for debugging\nnode.warn(\"Sending to HA: \" + JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 220,
        "wires": [
            [
                "cf69238bf8354f69"
            ]
        ]
    }
]